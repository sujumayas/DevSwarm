Agent Type,Description,Instruction Data Format,Business Data Format,Input Example,Prompt Logic,Output Format,Output Example,Next Agent Options
[Previous agents content remains the same...]
Quality Assurance,Validates and ensures quality across all aspects of the system including code implementation architecture and documentation,"JSON format:
{
  qualityGates: {
    code: {},
    architecture: {},
    documentation: {},
    testing: {}
  },
  thresholds: {},
  validationRules: [],
  feedbackLoops: []
}","JSON format:
{
  taskId: string,
  artifacts: {
    code: [],
    tests: [],
    docs: [],
    metrics: {}
  },
  contextualChecks: {
    type: string,
    rules: [],
    baseline: {}
  }[]
}","Instruction Data:
{
  ""qualityGates"": {
    ""code"": {
      ""complexity"": ""max:10"",
      ""coverage"": ""min:80"",
      ""duplication"": ""max:5%"",
      ""maintainability"": ""min:B""
    },
    ""architecture"": {
      ""patternCompliance"": ""strict"",
      ""dependencies"": ""validated"",
      ""layering"": ""enforced""
    },
    ""documentation"": {
      ""coverage"": ""min:90%"",
      ""completeness"": ""required_sections"",
      ""freshness"": ""max:30d""
    },
    ""testing"": {
      ""unitCoverage"": ""min:80%"",
      ""integrationCoverage"": ""min:70%"",
      ""e2eCoverage"": ""critical_paths""
    }
  },
  ""thresholds"": {
    ""critical"": 90,
    ""warning"": 75,
    ""info"": 60
  },
  ""validationRules"": [
    ""verify_pattern_implementation"",
    ""check_error_handling"",
    ""validate_api_contracts"",
    ""ensure_test_quality""
  ],
  ""feedbackLoops"": [
    ""architecture_review"",
    ""code_review"",
    ""test_review"",
    ""doc_review""
  ]
}

Business Data:
{
  ""taskId"": ""CART-2"",
  ""artifacts"": {
    ""code"": [
      {
        ""path"": ""src/cart/controllers/cart.controller.ts"",
        ""content"": ""..."",
        ""metrics"": {
          ""complexity"": 8,
          ""coverage"": 85
        }
      }
    ],
    ""tests"": [
      {
        ""path"": ""src/cart/controllers/cart.controller.spec.ts"",
        ""coverage"": 85,
        ""assertions"": 12
      }
    ],
    ""docs"": [
      {
        ""path"": ""docs/api/cart-service.md"",
        ""completeness"": 95
      }
    ],
    ""metrics"": {
      ""overallCoverage"": 85,
      ""maintainability"": ""A""
    }
  },
  ""contextualChecks"": [
    {
      ""type"": ""pattern_implementation"",
      ""rules"": [
        ""event_driven_validation"",
        ""cqrs_compliance""
      ],
      ""baseline"": {
        ""eventStructure"": true,
        ""commandValidation"": true
      }
    }
  ]
}","1. Validate against quality gates
2. Apply validation rules
3. Check contextual requirements
4. Generate quality metrics
5. Create improvement suggestions
6. Compile QA report","JSON format:
{
  qualityReport: {
    status: string,
    metrics: {},
    validations: [],
    issues: []
  },
  improvements: {
    critical: [],
    recommended: [],
    optional: []
  },
  feedback: {
    type: string,
    target: string,
    suggestions: []
  }[]
}","Output:
{
  ""qualityReport"": {
    ""status"": ""passed_with_warnings"",
    ""metrics"": {
      ""code"": {
        ""complexity"": {
          ""score"": 85,
          ""status"": ""passed""
        },
        ""coverage"": {
          ""score"": 85,
          ""status"": ""passed""
        },
        ""maintainability"": {
          ""score"": 90,
          ""status"": ""passed""
        }
      },
      ""architecture"": {
        ""patternCompliance"": {
          ""score"": 95,
          ""status"": ""passed""
        }
      },
      ""documentation"": {
        ""completeness"": {
          ""score"": 95,
          ""status"": ""passed""
        }
      }
    },
    ""validations"": [
      {
        ""rule"": ""error_handling"",
        ""status"": ""warning"",
        ""details"": ""Missing rate limit handling""
      }
    ],
    ""issues"": [
      {
        ""severity"": ""warning"",
        ""type"": ""code"",
        ""description"": ""Consider implementing retry mechanism for event publishing"",
        ""file"": ""cart.controller.ts"",
        ""line"": 45
      }
    ]
  },
  ""improvements"": {
    ""critical"": [],
    ""recommended"": [
      {
        ""type"": ""code"",
        ""description"": ""Add retry mechanism"",
        ""effort"": ""medium"",
        ""impact"": ""high""
      }
    ],
    ""optional"": [
      {
        ""type"": ""test"",
        ""description"": ""Add stress test for cart operations"",
        ""effort"": ""high"",
        ""impact"": ""medium""
      }
    ]
  },
  ""feedback"": [
    {
      ""type"": ""architecture"",
      ""target"": ""event_handling"",
      ""suggestions"": [
        ""Consider implementing dead letter queue"",
        ""Add circuit breaker for external service calls""
      ]
    },
    {
      ""type"": ""testing"",
      ""target"": ""integration_tests"",
      ""suggestions"": [
        ""Add more edge cases for concurrent cart updates""
      ]
    }
  ]
}","Task Decomposition Agent,
Architecture Agent,
Development Agent"