Agent Type,Description,Instruction Data Format,Business Data Format,Input Example,Prompt Logic,Output Format,Output Example,Next Agent Options
[Previous agents content remains the same...]
Documentation,Generates and maintains comprehensive documentation across system components and development artifacts,"JSON format:
{
  documentationStandards: {
    formats: [],
    templates: {},
    requirements: []
  },
  audience: string[],
  docTypes: [],
  contextRules: {}
}","JSON format:
{
  taskId: string,
  componentContext: {
    code: [],
    architecture: {},
    tests: []
  },
  existingDocs: {
    type: string,
    content: string,
    metadata: {}
  }[]
}","Instruction Data:
{
  ""documentationStandards"": {
    ""formats"": [
      ""markdown"",
      ""JSDoc"",
      ""OpenAPI""
    ],
    ""templates"": {
      ""api"": ""# API Documentation Template..."",
      ""component"": ""# Component Documentation..."",
      ""architecture"": ""# Architecture Documentation...""
    },
    ""requirements"": [
      ""must_have_examples"",
      ""must_have_error_handling"",
      ""must_link_to_tests""
    ]
  },
  ""audience"": [
    ""developers"",
    ""system_architects"",
    ""maintainers""
  ],
  ""docTypes"": [
    ""api"",
    ""implementation"",
    ""architecture"",
    ""testing""
  ],
  ""contextRules"": {
    ""code_snippets"": ""include_relevant_only"",
    ""diagrams"": ""mermaid_preferred"",
    ""examples"": ""must_be_runnable""
  }
}

Business Data:
{
  ""taskId"": ""CART-2"",
  ""componentContext"": {
    ""code"": [
      {
        ""path"": ""src/cart/controllers/cart.controller.ts"",
        ""content"": ""..."",
        ""type"": ""controller""
      }
    ],
    ""architecture"": {
      ""pattern"": ""Event-Driven Cart Updates"",
      ""decisions"": [""ADR-003""]
    },
    ""tests"": [
      {
        ""path"": ""src/cart/controllers/cart.controller.spec.ts"",
        ""type"": ""unit""
      }
    ]
  },
  ""existingDocs"": [
    {
      ""type"": ""api"",
      ""content"": ""# Cart API Documentation..."",
      ""metadata"": {
        ""version"": ""1.0.0"",
        ""lastUpdated"": ""2025-02-01""
      }
    }
  ]
}","1. Analyze component context
2. Identify documentation needs
3. Apply documentation standards
4. Generate documentation
5. Validate requirements
6. Update existing docs","JSON format:
{
  documentation: {
    files: [{
      path: string,
      content: string,
      type: string,
      metadata: {}
    }],
    coverage: {
      api: number,
      implementation: number,
      architecture: number
    }
  },
  validation: {
    requirements: [],
    completeness: number,
    quality: number
  }
}","Output:
{
  ""documentation"": {
    ""files"": [
      {
        ""path"": ""docs/api/cart-service.md"",
        ""content"": ""# Cart Service API\n\n## Overview\nThe Cart Service provides REST endpoints for managing shopping cart operations...\n\n## Endpoints\n\n### POST /cart/items\nAdds an item to the shopping cart.\n\n#### Request\n```json\n{\n  ""itemId"": ""string"",\n  ""quantity"": ""number""\n}\n```\n\n#### Response\n```json\n{\n  ""cartId"": ""string"",\n  ""items"": []\n}\n```\n\n## Error Handling\n...\n"",
        ""type"": ""api"",
        ""metadata"": {
          ""version"": ""1.1.0"",
          ""generated"": ""2025-02-06"",
          ""coverage"": ""100%""
        }
      },
      {
        ""path"": ""docs/architecture/cart-events.md"",
        ""content"": ""# Cart Event System\n\n## Event Flow\n```mermaid\nsequenceDiagram\n  participant C as CartService\n  participant K as Kafka\n  participant I as InventoryService\n  ...\n```\n"",
        ""type"": ""architecture"",
        ""metadata"": {
          ""pattern"": ""Event-Driven"",
          ""adr"": ""ADR-003""
        }
      }
    ],
    ""coverage"": {
      ""api"": 100,
      ""implementation"": 90,
      ""architecture"": 95
    }
  },
  ""validation"": {
    ""requirements"": [
      ""has_examples"": true,
      ""has_error_handling"": true,
      ""has_test_links"": true
    ],
    ""completeness"": 95,
    ""quality"": 90
  }
}","Quality Assurance Agent,
Task Decomposition Agent,
Context Management Agent"